---
import { Icon } from "astro-icon/components";

interface NavLink {
  url: string;
  name: string;
  children?: NavLink[];
}

// hold state of the menu
let isOpen = false;

// variable declaration
const { navLinks }: { navLinks: NavLink[] } = Astro.props as {
  navLinks: NavLink[];
};
// var pathname = new URL(Astro.request.url).pathname;
---

<div class="p-4 text-4xl md:hidden">
  <Icon id="nav-open" name="line-md:menu" />
</div>

<!-- Mobile modal menu -->
<div
  id="modal"
  class="fixed inset-0 flex bg-black bg-opacity-50 items-center justify-center backdrop-blur-sm z-30 hidden"
>
  <div
    id="modal-content"
    class="bg-ctp-crust border  border-white w-full max-w-md my-auto mx-2 p-8 rounded-lg shadow-lg z-40"
  >
    <div class="flex flex-col">
      <h4
        class="text-4xl not-prose text-ctp-pink font-extrabold mb-4 self-center justify-self-center"
      >
        Menu
      </h4>
      <nav class="flex flex-col items-center space-y-4">
        {
          navLinks.map((link, index) => (
            <div class="flex flex-col align-middle items-center">
              <div class="flex align-middle justify-center items-center flex-row">
                <a
                  class={`text-ctp-text font-extrabold no-underline px-2 lg:prose-lg hover:text-ctp-teal duration-150s cursor-default transition-all`}
                  href={link.url}
                >
                  {link.name}
                </a>
                {link.children && (
                  <Icon
                    data-sublink-open
                    id={`chevron-${link.name}`}
                    class="self-end relative text-ctp-peach text-3xl font-extrabold"
                    name="mdi:chevron-down"
                  />
                )}
              </div>
              {link.children && link.children.length > 0 && (
                <div
                  id={`submenu-${link.name}`}
                  class="p-2 relative bg-ctp-mantle w-32 top-2 max-w-md my-auto mx-2 rounded-lg shadow-lg z-40 transition-all opacity-0 duration-300 hidden"
                >
                  <nav class="flex w-full flex-col space-y-2">
                    {link.children.map((child) => (
                      <a
                        class={`text-ctp-text font-extrabold no-underline px-2 lg:prose-lg hover:text-ctp-teal duration-150s cursor-default transition-all`}
                        href={child.url}
                      >
                        {child.name}
                      </a>
                    ))}
                  </nav>
                </div>
              )}
            </div>
          ))
        }
      </nav>
    </div>
  </div>
</div>

<script>
  function createHamburgerListeners() {
    const modal = document.querySelector("#modal");
    const navOpen = document.querySelector("#nav-open");

    if (navOpen) {
      navOpen.addEventListener("click", () => {
        console.log("clicked nav open");
        if (modal) {
          modal.classList.remove("hidden");
          console.log("removed hidden class");
        }
      });
    }

    if (modal) {
      modal.addEventListener("click", (e) => {
        if (e.target === modal) {
          modal.classList.add("hidden");
        }
      });
    }
  }

  function updateActiveLink() {
    const pathname = window.location.pathname;
    const links = document.querySelectorAll("#modal nav a");

    links.forEach((link) => {
      const dot = link.previousElementSibling;
      if (link.getAttribute("href") === pathname) {
        if (!dot) {
          const newDot = document.createElement("span");
          newDot.classList.add(
            "bg-ctp-green",
            "w-2",
            "h-2",
            "rounded-full",
            "relative",
            "left-2",
            "mr-2"
          );
          newDot.setAttribute("transition:persist", "active");
          if (link.parentElement) {
            link.parentElement.insertBefore(newDot, link);
          }
        }
      } else {
        if (dot) {
          dot.remove();
        }
      }
    });
  }

  function createSubmenuToggles() {
    const sublinkButtons = document.querySelectorAll("[data-sublink-open]");

    sublinkButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        // @ts-ignore
        // the code below def. works!
        const linkName = e.currentTarget.id.split("-")[1];
        console.log(linkName);
        // @ts-ignore
        const sublinks = document.querySelector(`#submenu-${linkName}`);
        if (sublinks) {
          console.log(sublinks);
          if (sublinks.classList.contains("hidden")) {
            console.log("sublinks visible");
            sublinks.classList.remove("hidden");
            sublinks.classList.remove("opacity-0");
            sublinks.classList.add("flex");
            sublinks.classList.add("opacity-100");
          } else {
            console.log("sublinks hide");
            sublinks.classList.remove("flex");
            sublinks.classList.remove("opacity-0");
            sublinks.classList.add("hidden");
            sublinks.classList.add("opacity-100");
          }
        } else {
          console.log("no sublinks");
        }
      });
    });
  }

  // createHamburgerListeners();
  // createSubmenuToggles();
  document.addEventListener("astro:page-load", updateActiveLink);
  document.addEventListener("astro:page-load", createSubmenuToggles);
  document.addEventListener("astro:page-load", createHamburgerListeners);
</script>

<style>
  .active {
    color: #74c7ec !important;
  }
  .active::before {
    color: #cba6f7;
    content: "[";
  }
  .active::after {
    color: #cba6f7;
    content: "]";
  }
</style>
